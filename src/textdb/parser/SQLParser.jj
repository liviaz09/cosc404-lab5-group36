/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. SQLParser.jj */
/*@egen*//**
 * A simple SQL parser.
 */options{  JDK_VERSION = "1.6";  static = false;
             
                         
}

PARSER_BEGIN(SimpleParser)

package textdb.parser;

public class SimpleParser/*@bgen(jjtree)*/implements SimpleParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTSimpleParserState jjtree = new JJTSimpleParserState();

/*@egen*/
  ASTStart n = null;

  public void parseString() throws Exception {
      n = Start();
  }

  public static void main(String args[]) {
    System.out.println("Reading from standard input...");
    SimpleParser t = new SimpleParser(System.in);
    try {
      SimpleNode n = t.Start();
      n.dump("");
      System.out.println("Thank you.");
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }

  public ASTStart gettree() {
    return n;
  }
}

PARSER_END(SimpleParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>						/* C-style one line comments */
| <"--" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>						/* SQL one line comments */
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">				/* SQL multiline comments */
}

/* KEYWORDS */
TOKEN [IGNORE_CASE] :
{
  <SELECT: "select">
| <FROM: "from">
| <WHERE: "where">
/* TODO: Add ORDER BY, ASC, DESC tokens here. */
| <GROUPBY: "group by" | "groupby">
| <INNER: "inner">
| <JOIN: "join">
| <OPENPAREN: "(">
| <CLOSEPAREN: ")">
| <AND: "and">
| <OR: "or">
| <NOT: "not">
| <XOR: "xor">
| <ON: "on">
}


TOKEN:  /* Literals */
{
    <INTEGER_LITERAL:  (["0"-"9"])+ >
  | <FLOATING_POINT_LITERAL:
          (["0"-"9"])+ "." (["0"-"9"])+ (<EXPONENT>)?
        | "." (["0"-"9"])+ (<EXPONENT>)?
        | (["0"-"9"])+ <EXPONENT>
        | (["0"-"9"])+ (<EXPONENT>)?
    >
  | < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
  | < STRING_LITERAL: "'" (~["'"])* ( "''" (~["'"])* )* "'" >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: ( <BASEID > | < DQSTRING > ) ( "." ( <BASEID > | < DQSTRING > ) )* (".*")? >
|
  < BASEID: (<LETTER>) (<LETTER>|<DIGIT>)* >
|
  < DQSTRING: "\"" (["_","a"-"z","A"-"Z","0"-"9","!","@","#","$","%","^","&","*","(",")","-","+","=","{","}","[","]",":","|",";",".","<",">",",",".","?","/"," ","\t","\n","\r"])* "\"" >
| 
  < #LETTER: ["_","a"-"z","A"-"Z"] >
|
  < #DIGIT: ["0"-"9"] >
}



// Start of production rules

ASTStart Start()        : {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
        try {
/*@egen*/
	SQLQuery()/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ { return jjtn000; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/  
}

/* 
 SQL SELECT query syntax
*/
void SQLQuery() : { }
{
	Query()
}

void Query() : {}
{
	Select() [ From() ] [ Where() ]  /* TODO: Add support for ORDER BY here. */
}

void Select()           : {/*@bgen(jjtree) #Select(true) */
  ASTSelect jjtn000 = new ASTSelect(JJTSELECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #Select(true) */
        try {
/*@egen*/
 	<SELECT> SQLSelectList()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/  
}

void SQLSelectList() : {}
{
	AdditiveExpression() ( "," AdditiveExpression())*
}


void From()           : {/*@bgen(jjtree) #From(> 0) */
  ASTFrom jjtn000 = new ASTFrom(JJTFROM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #From(> 0) */
        try {
/*@egen*/
	<FROM> FromItem() ( "," FromItem() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 0);
          }
        }
/*@egen*/  
}


void FromItem() : {}
{
  Identifier() (JoinExpr())*
}

void JoinExpr()            : {/*@bgen(jjtree) #JoinExpr(true) */
                              ASTJoinExpr jjtn000 = new ASTJoinExpr(JJTJOINEXPR);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);
/*@egen*/String s;}
{/*@bgen(jjtree) #JoinExpr(true) */
   try {
/*@egen*/ 
   [<INNER >] < JOIN > FromItem() On()/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/    
}

void On()       : {/*@bgen(jjtree) #On(true) */
  ASTOn jjtn000 = new ASTOn(JJTON);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #On(true) */
        try {
/*@egen*/
	<ON> SQLOrExpr()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Where()            : {/*@bgen(jjtree) #Where(> 0) */
  ASTWhere jjtn000 = new ASTWhere(JJTWHERE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #Where(> 0) */
        try {
/*@egen*/
  	<WHERE> SQLOrExpr()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 0);
          }
        }
/*@egen*/ 
}

/*
TODO: Add OrderBy support here.
*/

/*
Expression syntax
*/
	
void AdditiveExpression()          : {/*@bgen(jjtree) #Add(> 1) */
  ASTAdd jjtn000 = new ASTAdd(JJTADD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #Add(> 1) */
        try {
/*@egen*/
	MultiplicativeExpression() ( LOOKAHEAD(2) Aop() MultiplicativeExpression() )*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/  
}

void Aop()      : {/*@bgen(jjtree) Aop */
  ASTAop jjtn000 = new ASTAop(JJTAOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Aop */
        try {
/*@egen*/
	("+"/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ 		{ jjtn000.setName("+"); }
     	| "-"/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/	{ jjtn000.setName("-"); } 
  	)/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void Mop()      : {/*@bgen(jjtree) Mop */
  ASTMop jjtn000 = new ASTMop(JJTMOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Mop */
  try {
/*@egen*/
  ("*"/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ 		{ jjtn000.setName("*"); }
  	| "/"/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ 	{ jjtn000.setName("/"); } 
  	| "%"/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ 	{ jjtn000.setName("%"); }
  )/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void MultiplicativeExpression()           : {/*@bgen(jjtree) #Mult(> 1) */
  ASTMult jjtn000 = new ASTMult(JJTMULT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #Mult(> 1) */
        try {
/*@egen*/
	SQLTerm() ( LOOKAHEAD(2) Mop() SQLTerm())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/  
}

void SQLTerm() : {}
{
  (
    LOOKAHEAD(2) <OPENPAREN> SQLOrExpr() <CLOSEPAREN> | LOOKAHEAD(2) SQLLiteral()  
    | LOOKAHEAD(2) Identifier()  
   )  
}


void SQLOrExpr()         : {/*@bgen(jjtree) #Or(> 1) */
  ASTOr jjtn000 = new ASTOr(JJTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #Or(> 1) */
  try {
/*@egen*/
  SQLAndExpr() ( <OR> SQLAndExpr() | <XOR> { jjtn000.setType(2); } SQLAndExpr() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/  
}

void SQLAndExpr()          : {/*@bgen(jjtree) #And(> 1) */
  ASTAnd jjtn000 = new ASTAnd(JJTAND);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #And(> 1) */
  try {
/*@egen*/
  SQLNotExpr() ( <AND> SQLNotExpr())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/  
}

void SQLNotExpr() : {}
{
  (Not() | SQLCompareExpr())
}

void Not()         : {/*@bgen(jjtree) #Not(> 0) */
  ASTNot jjtn000 = new ASTNot(JJTNOT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #Not(> 0) */
  try {
/*@egen*/
  <NOT> SQLCompareExpr()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 0);
    }
  }
/*@egen*/ 
}

void SQLCompareExpr()          : {/*@bgen(jjtree) #Cop(> 1) */
                                  ASTCop jjtn000 = new ASTCop(JJTCOP);
                                  boolean jjtc000 = true;
                                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;Token u = null;}
{/*@bgen(jjtree) #Cop(> 1) */
        try {
/*@egen*/
	AdditiveExpression() 
	[( (t=">" | t=">=" | t="=" | t="<=" | t="<" | t="!=" | t="<>") AdditiveExpression() { String name = t.image; if (u != null) name += u.image; jjtn000.setName(name); } 
	)]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
          }
        }
/*@egen*/
}

void SQLLiteral() : {}
{
  StringLiteral() | IntLiteral() | FloatLiteral()
}

void IntLiteral()          : {/*@bgen(jjtree) Integer */
                              ASTInteger jjtn000 = new ASTInteger(JJTINTEGER);
                              boolean jjtc000 = true;
                              jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Integer */
  try {
/*@egen*/
  t=<INTEGER_LITERAL>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn000, true);
                        jjtc000 = false;
                      }
/*@egen*/ { jjtn000.setName(t.image); }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void FloatLiteral()       : {/*@bgen(jjtree) Real */
                             ASTReal jjtn000 = new ASTReal(JJTREAL);
                             boolean jjtc000 = true;
                             jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Real */
  try {
/*@egen*/
  t=<FLOATING_POINT_LITERAL>/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/ { jjtn000.setName(t.image); }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void StringLiteral()         : {/*@bgen(jjtree) String */
                                ASTString jjtn000 = new ASTString(JJTSTRING);
                                boolean jjtc000 = true;
                                jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) String */
  try {
/*@egen*/
  t=<STRING_LITERAL>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/ { jjtn000.setName(t.image); }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Token Identifier()       : {/*@bgen(jjtree) MyID */
                            ASTMyID jjtn000 = new ASTMyID(JJTMYID);
                            boolean jjtc000 = true;
                            jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) MyID */
  try {
/*@egen*/
  t=<IDENTIFIER>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ { jjtn000.setName(t.image);  return t;}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/  
}