/* Generated By:JJTree&JavaCC: Do not edit this line. SimpleParserConstants.java */
package textdb.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface SimpleParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SELECT = 8;
  /** RegularExpression Id. */
  int FROM = 9;
  /** RegularExpression Id. */
  int WHERE = 10;
  /** RegularExpression Id. */
  int ASC = 11;
  /** RegularExpression Id. */
  int DESC = 12;
  /** RegularExpression Id. */
  int ORDERBY = 13;
  /** RegularExpression Id. */
  int GROUPBY = 14;
  /** RegularExpression Id. */
  int INNER = 15;
  /** RegularExpression Id. */
  int JOIN = 16;
  /** RegularExpression Id. */
  int OPENPAREN = 17;
  /** RegularExpression Id. */
  int CLOSEPAREN = 18;
  /** RegularExpression Id. */
  int AND = 19;
  /** RegularExpression Id. */
  int OR = 20;
  /** RegularExpression Id. */
  int NOT = 21;
  /** RegularExpression Id. */
  int XOR = 22;
  /** RegularExpression Id. */
  int ON = 23;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 24;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 25;
  /** RegularExpression Id. */
  int EXPONENT = 26;
  /** RegularExpression Id. */
  int STRING_LITERAL = 27;
  /** RegularExpression Id. */
  int IDENTIFIER = 28;
  /** RegularExpression Id. */
  int BASEID = 29;
  /** RegularExpression Id. */
  int DQSTRING = 30;
  /** RegularExpression Id. */
  int LETTER = 31;
  /** RegularExpression Id. */
  int DIGIT = 32;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "<token of kind 7>",
    "\"select\"",
    "\"from\"",
    "\"where\"",
    "\"asc\"",
    "\"desc\"",
    "<ORDERBY>",
    "<GROUPBY>",
    "\"inner\"",
    "\"join\"",
    "\"(\"",
    "\")\"",
    "\"and\"",
    "\"or\"",
    "\"not\"",
    "\"xor\"",
    "\"on\"",
    "<INTEGER_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<EXPONENT>",
    "<STRING_LITERAL>",
    "<IDENTIFIER>",
    "<BASEID>",
    "<DQSTRING>",
    "<LETTER>",
    "<DIGIT>",
    "\",\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\">\"",
    "\">=\"",
    "\"=\"",
    "\"<=\"",
    "\"<\"",
    "\"!=\"",
    "\"<>\"",
  };

}
